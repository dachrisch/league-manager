name: ${SERVICE_NAME}
services:
  www:
    image: leaguesphere/frontend:latest
    container_name: ${COMPOSE_PROJECT_NAME}.www
    labels:
      # redirect service
      # https://jensknipper.de/blog/traefik-http-to-https-redirect/
      - traefik.http.routers.${SERVICE_NAME}-http.entrypoints=web
      - traefik.http.routers.${SERVICE_NAME}-http.rule=Host(`leaguesphere.app`) || Host(`www.leaguesphere.app`)
      - traefik.http.routers.${SERVICE_NAME}-http.middlewares=${SERVICE_NAME}-https
      - traefik.http.middlewares.${SERVICE_NAME}-https.redirectscheme.scheme=https

      # true service
      - traefik.http.routers.${SERVICE_NAME}.tls=true
      - traefik.http.routers.${SERVICE_NAME}.rule=Host(`${SERVICE_HOST}`)
      - traefik.http.routers.${SERVICE_NAME}.tls.certresolver=letsencryptdnsresolver

      # prod resolver
      - traefik.http.routers.${SERVICE_NAME}_prod.tls=true
      - traefik.http.routers.${SERVICE_NAME}_prod.rule=Host(`leaguesphere.app`) || Host(`www.leaguesphere.app`)
      - traefik.http.routers.${SERVICE_NAME}_prod.tls.certresolver=letsencrypthttpresolver

      # local service
      - traefik.http.routers.${SERVICE_NAME}_local_qualified.rule=Host(`${SERVICE_NAME}.${LOCAL_HOSTNAME}`)
      - traefik.http.routers.${SERVICE_NAME}_local_qualified.entrypoints=web
      # portainer team
      - io.portainer.accesscontrol.teams=leaguesphere
    networks:
      - backend
      - proxy
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: curl -A healthcheck -I --fail http://localhost || exit 1
    restart: unless-stopped

  app:
    image: leaguesphere/backend:latest
    container_name: ${COMPOSE_PROJECT_NAME}.app
    command: gunicorn -b 0.0.0.0:8000 league_manager.wsgi
    labels:
      - traefik.enable=false
      # portainer team
      - io.portainer.accesscontrol.teams=${SERVICE_NAME}
    env_file: ls.env
    environment:
      DJANGO_SETTINGS_MODULE: league_manager.settings.dev
      RUN_MIGRATIONS: ${RUN_MIGRATIONS:-false}  # Default to false if not set
    networks:
      - proxy
      - backend
    healthcheck:
      test: curl -A healthcheck http://localhost:8000/health/?format=json | jq -e '.DatabaseHeartBeatCheck == "working"'
    restart: unless-stopped

networks:
  backend:
    internal: true
  proxy:
    external: true
